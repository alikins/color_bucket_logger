#!/usr/bin/python

import logging

import random
import string
import sys
import threading
import time

import color_debug
from color_debug import other_module

log = logging.getLogger('color_debug')
log.setLevel(logging.DEBUG)


LOG_LEVELS = [(logging.DEBUG, 'DEBUG'),
              (logging.INFO, 'INFO'),
              (logging.WARNING, 'WARNING'),
              (logging.ERROR, 'ERROR'),
              (logging.CRITICAL, 'CRITICAL')]


class DefaultAttrFilter(object):
    def __init__(self, name=None, attrs=None):
        self.name = name
        self.attrs = attrs

    def filter(self, record):
        color_debug.add_default_record_attrs(record, self.attrs)
        return True


def _formatter(color_groups=None, fmt=None, default_color_by_attr=None):
    if color_groups is None:
        color_groups = [('name', ['name', 'levelname'])]
    fmt = fmt or '%(levelname)s %(name)s %(message)s'
    default_color_by_attr = default_color_by_attr or 'name'
    formatter = color_debug.ColorFormatter(fmt=fmt,
                                           # default_color_by_attr=default_color_by_attr,
                                           color_groups=color_groups)

    return formatter


def setup_logger(formatter):
    handler = logging.StreamHandler()
    handler.setLevel(logging.DEBUG)
    handler.setFormatter(formatter)

    handler.addFilter(DefaultAttrFilter(name="", attrs=['record']))
    log.addHandler(handler)

    return log, handler


def gen_loggers(base_logger_name):
    xs = string.ascii_uppercase
    ys = string.ascii_lowercase
    zs = string.digits
    x_size = 1
    y_size = 1
    z_size = 1

    for x in [''] + list(xs[0:x_size]):
        for y in [''] + list(ys[0:y_size]):
            for z in [''] + list(zs[0:z_size]):
                r = [base_logger_name] + [a for a in [x, y, z] if a]
                # print('r: %s' % r)
                name = '.'.join(r)
                # print('name: %s' % name)
                yield name


def func1(logger, level, **kwargs):

    extra = {'random': random.randint(0, 7),
             'other': 'i like cheese'}
    extra.update(kwargs)
    logger.log(level, 'foo blip:', extra=extra)


def func2(logger, level, **kwargs):
    logger.log(level, 'blip bax: %s', 'bar')


def throw_exc(msg=None):
    _msg = 'I object!'
    if msg:
        _msg += msg
    raise Exception(_msg)


# to test nested exceptions, esp on py3
def throw_deep_exc(msg=None):
    try:
        37/0
    except ZeroDivisionError as outer_e:
        log.exception(outer_e)
        try:
            doesnt_exist.append(1)  # noqa
        except Exception as inner_e:
            log.exception(inner_e)
            throw_exc(msg=msg)


def func3():
    return throw_exc()


def func4():
    try:
        throw_deep_exc(msg=' to high prices!')
    except Exception as e:
        try:
            raise e
        except Exception as inner_e:
            log.exception(inner_e)


def random_sleep():
    time.sleep(0.5*random.random())
    return


def gen_log_events(msg, sleep):
    loggers = []
    for name in gen_loggers('color_debug'):
        _logger = logging.getLogger(name)
        loggers.append(_logger)

    for logger in loggers:
        for level, levelname in LOG_LEVELS:
            func1(logger, level)
            random_sleep()
        for level, levelname in LOG_LEVELS:
            func2(logger, level, blip='1212312')
            logger.log(level, msg)
            random_sleep()
        # for level, levelname in LOG_LEVELS:
        try:
            func3()
            random_sleep()
        except Exception as e:
            log.exception(e)
        random_sleep()

        func4()
        random_sleep()

    other_module.func3()


def _gen_log_events(handler):
    gen_log_events()
    fmt = '%(asctime)s %(threadName)-2s level: %(levelname)s module: %(module)s name: %(name)s funcName: %(funcName)s %(message)s'

    color_groups2 = [('funcName', ['message', 'module', 'name']),
                     ('levelname', ['levelname'])]
    formatter = _formatter(color_groups2, fmt,
                           default_color_by_attr='funcName')
    handler.setFormatter(formatter)
    gen_log_events()


def main(args):
    color_groups = [
                    #('thread', ['threadName']),
                    # ('threadName', ['thread']),
                    # ('levelname', ['levelno']),
                    ('threadName', ['process', 'processName', 'thread']),
                    ('name', ['module', 'filename', 'message']),
                    ('funcName', ['lineno', 'exc_text'])
                    # ('levelname', ['levelno'])]
    ]
    # fmt = '%(asctime)s %(relativeCreated)d %(levelname)s %(module)s %(name)s %(funcName)s %(random)s %(message)s'
    fmt = '%(asctime)s %(threadName)-2s level: %(levelname)s module: %(module)s name: %(name)s funcName: %(funcName)s %(message)s'
    fmt_all = '%(asctime)s %(levelname)-0.1s %(levelno)-0.1d %(processName)-0.1s %(process)d %(threadName)s %(thread)d %(name)s %(module)s %(filename)s %(lineno)d %(funcName)s - %(message)s'

    formatter = _formatter(color_groups, fmt_all,
                           default_color_by_attr='threadName',
                           # default_color_by_attr='name')
                           )
    logger, handler = setup_logger(formatter)

    import logging_tree
    logging_tree.printout()

    threads = []

    main_thread = threading.currentThread()

    thread_count = 3
    for i in range(thread_count):
        t = threading.Thread(target=gen_log_events, name='T%s' % i,
                             args=('msg from thread #%s' % i, i))
        threads.append(t)
        t.daemon = True
        t.start()

    for t in threading.enumerate():
        if t is main_thread:
            continue
        # logging.debug('joining %s', t.getName())
        t.join(3)
    return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv[:]))
